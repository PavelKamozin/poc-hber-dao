/*Copyright (c) 2019-2020 softserveinc.com All Rights Reserved.
 This software is the confidential and proprietary information of softserveinc.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with softserveinc.com*/
package com.softeserve.wm_demo.db_hibernate.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.softeserve.wm_demo.db_hibernate.Roles;

/**
 * Service object for domain model class {@link Roles}.
 */
public interface RolesService {

    /**
     * Creates a new Roles. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Roles if any.
     *
     * @param roles Details of the Roles to be created; value cannot be null.
     * @return The newly created Roles.
     */
    Roles create(@Valid Roles roles);


	/**
     * Returns Roles by given id if exists.
     *
     * @param rolesId The id of the Roles to get; value cannot be null.
     * @return Roles associated with the given rolesId.
	 * @throws EntityNotFoundException If no Roles is found.
     */
    Roles getById(Integer rolesId);

    /**
     * Find and return the Roles by given id if exists, returns null otherwise.
     *
     * @param rolesId The id of the Roles to get; value cannot be null.
     * @return Roles associated with the given rolesId.
     */
    Roles findById(Integer rolesId);

	/**
     * Find and return the list of Roles by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param rolesIds The id's of the Roles to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Roles associated with the given rolesIds.
     */
    List<Roles> findByMultipleIds(List<Integer> rolesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Roles. It replaces all fields of the existing Roles with the given roles.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Roles if any.
     *
     * @param roles The details of the Roles to be updated; value cannot be null.
     * @return The updated Roles.
     * @throws EntityNotFoundException if no Roles is found with given input.
     */
    Roles update(@Valid Roles roles);


    /**
     * Partially updates the details of an existing Roles. It updates only the
     * fields of the existing Roles which are passed in the rolesPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Roles if any.
     *
     * @param rolesId The id of the Roles to be deleted; value cannot be null.
     * @param rolesPatch The partial data of Roles which is supposed to be updated; value cannot be null.
     * @return The updated Roles.
     * @throws EntityNotFoundException if no Roles is found with given input.
     */
    Roles partialUpdate(Integer rolesId, Map<String, Object> rolesPatch);

    /**
     * Deletes an existing Roles with the given id.
     *
     * @param rolesId The id of the Roles to be deleted; value cannot be null.
     * @return The deleted Roles.
     * @throws EntityNotFoundException if no Roles found with the given id.
     */
    Roles delete(Integer rolesId);

    /**
     * Deletes an existing Roles with the given object.
     *
     * @param roles The instance of the Roles to be deleted; value cannot be null.
     */
    void delete(Roles roles);

    /**
     * Find all Roles matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Roles.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Roles> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Roles matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Roles.
     *
     * @see Pageable
     * @see Page
     */
    Page<Roles> findAll(String query, Pageable pageable);

    /**
     * Exports all Roles matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Roles matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Roles in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Roles.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}