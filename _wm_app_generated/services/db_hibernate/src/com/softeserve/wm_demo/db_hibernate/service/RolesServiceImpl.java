/*Copyright (c) 2019-2020 softserveinc.com All Rights Reserved.
 This software is the confidential and proprietary information of softserveinc.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with softserveinc.com*/
package com.softeserve.wm_demo.db_hibernate.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.softeserve.wm_demo.db_hibernate.Roles;


/**
 * ServiceImpl object for domain model class Roles.
 *
 * @see Roles
 */
@Service("db_hibernate.RolesService")
@Validated
public class RolesServiceImpl implements RolesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RolesServiceImpl.class);


    @Autowired
    @Qualifier("db_hibernate.RolesDao")
    private WMGenericDao<Roles, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Roles, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "db_hibernateTransactionManager")
    @Override
    public Roles create(Roles roles) {
        LOGGER.debug("Creating a new Roles with information: {}", roles);

        Roles rolesCreated = this.wmGenericDao.create(roles);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(rolesCreated);
    }

    @Transactional(readOnly = true, value = "db_hibernateTransactionManager")
    @Override
    public Roles getById(Integer rolesId) {
        LOGGER.debug("Finding Roles by id: {}", rolesId);
        return this.wmGenericDao.findById(rolesId);
    }

    @Transactional(readOnly = true, value = "db_hibernateTransactionManager")
    @Override
    public Roles findById(Integer rolesId) {
        LOGGER.debug("Finding Roles by id: {}", rolesId);
        try {
            return this.wmGenericDao.findById(rolesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Roles found with id: {}", rolesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "db_hibernateTransactionManager")
    @Override
    public List<Roles> findByMultipleIds(List<Integer> rolesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Roles by ids: {}", rolesIds);

        return this.wmGenericDao.findByMultipleIds(rolesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "db_hibernateTransactionManager")
    @Override
    public Roles update(Roles roles) {
        LOGGER.debug("Updating Roles with information: {}", roles);

        this.wmGenericDao.update(roles);
        this.wmGenericDao.refresh(roles);

        return roles;
    }

    @Transactional(value = "db_hibernateTransactionManager")
    @Override
    public Roles partialUpdate(Integer rolesId, Map<String, Object>rolesPatch) {
        LOGGER.debug("Partially Updating the Roles with id: {}", rolesId);

        Roles roles = getById(rolesId);

        try {
            ObjectReader rolesReader = this.objectMapper.reader().forType(Roles.class).withValueToUpdate(roles);
            roles = rolesReader.readValue(this.objectMapper.writeValueAsString(rolesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", rolesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        roles = update(roles);

        return roles;
    }

    @Transactional(value = "db_hibernateTransactionManager")
    @Override
    public Roles delete(Integer rolesId) {
        LOGGER.debug("Deleting Roles with id: {}", rolesId);
        Roles deleted = this.wmGenericDao.findById(rolesId);
        if (deleted == null) {
            LOGGER.debug("No Roles found with id: {}", rolesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Roles.class.getSimpleName(), rolesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "db_hibernateTransactionManager")
    @Override
    public void delete(Roles roles) {
        LOGGER.debug("Deleting Roles with {}", roles);
        this.wmGenericDao.delete(roles);
    }

    @Transactional(readOnly = true, value = "db_hibernateTransactionManager")
    @Override
    public Page<Roles> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Roles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "db_hibernateTransactionManager")
    @Override
    public Page<Roles> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Roles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "db_hibernateTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service db_hibernate for table Roles to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "db_hibernateTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service db_hibernate for table Roles to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "db_hibernateTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "db_hibernateTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}